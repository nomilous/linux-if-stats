// Generated by CoffeeScript 1.6.3
var EOL, Emitter, dcopy, deferred, fs, local;

fs = require('fs');

Emitter = require('emitter');

dcopy = require('deep-copy');

deferred = require('decor').deferred;

EOL = require('os').EOL;

/*

realized
--------

* internal polling loop per metricset might not be too smart
* more sensible perhaps for a calling parent loop to manage polling
* especially since the parent is likely also polling 
* with the resulting race condition therefore doing the foxtrot
* or playing musical chairs with itself in the mirror
* the music stops
* everybody either gets a chair, or bangs their head


moral of the story
------------------

* outside should not poll
* TODO: inside should publish events


realize (cont)
--------------

* most of the functionality here should be in a superclass, it will be repeated
* not so far fetched wanting to tinker with iface aliases, vlans, and such over a web api
* esp. eg. setting up a private vlan from some appserver vm onto some other dbserver vm on the fly


local
-----

* this module's privates
* accessable for testing via `.test()`
* obviously therefore also accessable in general (if used, expect no consistancy between versions)



`local.emitter`        - emits 'counters' event with latest counter values at each poll
                       - emits 'deltas' event including pollspan (milliseconds) at each poll
                       - IMPORTANT, poller skips if it catches it's tail
`local.poke`           - a purposeless additional comment referring, in jest at my excessive annotations, to a non existant property
`remote.fondle`        - not yet implemented on facebook, but just you wait...
*/


local = {
  supported: process.platform === 'linux',
  metrics: ['rxBytes', 'rxPackets', 'rxErrs', 'rxDrop', 'rxFifo', 'rxFrame', 'rxCompressed', 'rxMulticast', 'txBytes', 'txPackets', 'txErrs', 'txDrop', 'txFifo', 'txColls', 'txCarrier', 'txCompressed'],
  pollTimer: void 0,
  pollActive: false,
  pollError: void 0,
  pollInterval: 1000,
  pollHistory: 500,
  buffer: [],
  emitter: new Emitter,
  counters: function(opts, callback) {
    var data, error, platform, result, timestamp, _ref;
    error = null;
    if (!local.supported) {
      platform = process.platform;
      error = new Error("Platform unsupported, expected: linux, got: " + platform);
      console.log(error);
    }
    _ref = local.buffer[0], data = _ref[0], timestamp = _ref[1];
    result = {
      data: data,
      at: timestamp
    };
    if (typeof callback === 'function') {
      return callback(error, result);
    }
    if (!local.supported) {
      throw error;
    }
    return result;
  },
  poll: function() {
    var data, error, now, reading, source;
    if (local.pollActive) {
      return;
    }
    local.pollActive = true;
    now = new Date;
    data = {};
    reading = [data, now];
    try {
      source = fs.readFileSync('/proc/net/dev', 'utf8');
    } catch (_error) {
      error = _error;
      local.pollError = error;
      local.pollActive = false;
      return;
    }
    local.pollError = void 0;
    source.split(EOL).slice(2).map(function(line) {
      var i, iface, ignore, keys, metrics, readings, _ref;
      if (line.match(/^\s*$/)) {
        return;
      }
      _ref = line.match(/\s*(.*)\:(.*)/), ignore = _ref[0], iface = _ref[1], readings = _ref[2];
      keys = local.metrics;
      i = -1;
      metrics = data[iface] = {};
      return readings.match(/\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\s*(\d*)/).map(function(value) {
        var key;
        if (!(key = keys[i++])) {
          return;
        }
        return metrics[key] = parseInt(value);
      });
    });
    local.buffer.unshift(reading);
    while (local.buffer.length > local.pollHistory) {
      local.buffer.pop();
    }
    local.emitter.emit('counters', data, now);
    return local.pollActive = false;
  },
  start: deferred(function(action) {
    if (!local.supported) {
      return action.reject(new Error("Platform unsupported, expected: linux, got: " + process.platform));
    }
    if (local.pollTimer != null) {
      return action.resolve();
    }
    local.poll();
    local.pollTimer = setInterval(local.poll, local.pollInterval);
    return action.resolve();
  }),
  stop: function() {
    clearInterval(local.pollTimer);
    return local.pollTimer = void 0;
  },
  /*
  
  vertex friendlyness
  -------------------
  
  * this config() function can be exported on a running vertex (see web exports below)
  * web hit: `config?pollInterval=10000` will call the function with `opts.query.interval`
  * obviously having to pass opts.query.pollInterval would seem a bit obtuse for local use, 
    so the function does a bit of juggling about that
  * admittedly this need could be considered a bit of a design wrinkle
      * missing:  Alternative
      * lastseen: 29th Feb, 2017
  */

  config: function(opts, callback) {
    var key, params, previous, results;
    params = opts || {};
    if (opts.query != null) {
      params = opts.query;
    }
    results = {
      polling: local.pollTimer != null,
      interval: {
        value: local.pollInterval,
        changed: false,
        previous: null
      },
      history: {
        value: local.pollHistory,
        changed: false,
        previous: null
      }
    };
    for (key in params) {
      switch (key) {
        case 'interval':
          try {
            if (local.pollInterval === params[key]) {
              continue;
            }
            previous = local.pollInterval;
            local.pollInterval = parseInt(params[key]);
            results[key].changed = true;
            results[key].value = local.pollInterval;
            results[key].previous = previous;
            if (local.pollTimer != null) {
              local.stop();
              local.start();
            }
          } catch (_error) {}
          break;
        case 'history':
          try {
            if (local.pollHistory === params[key]) {
              continue;
            }
            previous = local.pollHistory;
            local.pollHistory = parseInt(params[key]);
            results[key].changed = true;
            results[key].value = local.pollHistory;
            results[key].previous = previous;
          } catch (_error) {}
      }
    }
    if (typeof callback === 'function') {
      return callback(null, results);
    }
  }
};

/*

web exports
-----------

* these functions become availiable over http if this component is grafted 
  onto a running [vertex](https://github.com/nomilous/vertex) routes tree
* still much to be done with vertex
* eg. roles in the export config below does nothing yet
*/


local.counters.$www = {};

local.config.$www = {
  roles: ['admin']
};

/*

module / component exports
--------------------------
*/


module.exports = {
  counters: local.counters,
  start: local.start,
  stop: local.stop,
  config: local.config,
  on: function() {
    return local.emitter.on.apply(local.emitter, arguments);
  },
  once: function() {
    return local.emitter.once.apply(local.emitter, arguments);
  },
  off: function() {
    return local.emitter.off.apply(local.emitter, arguments);
  }
};

module.exports.test = function() {
  return local;
};
